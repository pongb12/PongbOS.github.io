let data = {
    notes: [],
    playlist: [],
    wallpapers: [
        'https://picsum.photos/400/800?blur=2&random=1',
        'https://picsum.photos/400/800?blur=2&random=2',
        'https://picsum.photos/400/800?blur=2&random=3'
    ],
    homeWallpapers: [
        'https://picsum.photos/400/800?blur=3&random=4',
        'https://picsum.photos/400/800?blur=3&random=5',
        'https://picsum.photos/400/800?blur=3&random=6'
    ],
    currentWallpaperIndex: 0,
    currentHomeWallpaperIndex: 0,
    accentColor: '#4ba3ff',
    logs: [],
    currentTrackIndex: -1,
    isPlaying: false,
    chatHistory: [],
    callPort: Math.floor(1000 + Math.random() * 9000),
    friends: [],
    callStatus: 'idle',
    currentAudio: null,
    currentCall: null
};

document.documentElement.style.setProperty('--accent', data.accentColor);

function logEvent(event) {
    const timestamp = new Date().toLocaleString('vi-VN');
    data.logs.unshift(`[${timestamp}] ${event}`);
    if (data.logs.length > 100) data.logs.pop();
    console.log(`PongbOS: ${event}`);
}

window.addEventListener('load', function() {
    setTimeout(function() {
        document.getElementById('boot-animation').style.display = 'none';
        logEvent('H·ªá th·ªëng kh·ªüi ƒë·ªông th√†nh c√¥ng');
        updateTime();
        updateWallpapers();
    }, 3800);
});

const apps = [
    { name: 'Browser', emoji: 'üåê', color: '#4ba3ff' },
    { name: 'Music', emoji: 'üéµ', color: '#ff6b6b' },
    { name: 'ChatCBD', emoji: 'ü§ñ', color: '#4ecdc4' },
    { name: 'Call', emoji: 'üìû', color: '#45b7d1' },
    { name: 'Notes', emoji: 'üóíÔ∏è', color: '#96ceb4' },
    { name: 'Speedtest', emoji: 'üìä', color: '#ffeaa7' },
    { name: 'Settings', emoji: '‚öôÔ∏è', color: '#a29bfe' }
];

const grid = document.getElementById('grid');
apps.forEach(app => {
    const div = document.createElement('div');
    div.className = 'icon';
    div.innerHTML = `<div>${app.emoji}</div><small>${app.name}</small>`;
    div.onclick = () => openApp(app.name);
    grid.appendChild(div);
});

document.querySelectorAll('.dock-icon').forEach(icon => {
    icon.onclick = () => openApp(icon.dataset.app);
});

const appWindow = document.getElementById('appWindow');
const appTitle = document.getElementById('appTitle');
const appBody = document.getElementById('appBody');

document.getElementById('closeApp').onclick = closeApp;

function cleanupCurrentApp() {
    const currentApp = appTitle.textContent;
    
    if (currentApp === 'Music' && data.currentAudio) {
        data.currentAudio.pause();
        data.currentAudio.src = '';
        data.currentAudio = null;
        data.isPlaying = false;
    }
    
    if (currentApp === 'Call') {
        data.callStatus = 'idle';
        data.currentCall = null;
    }
    
    const oldAudio = document.getElementById('audioPlayer');
    if (oldAudio) oldAudio.remove();
}

function closeApp() {
    appWindow.classList.remove('show');
    appWindow.classList.add('hide');
    setTimeout(() => {
        cleanupCurrentApp();
        appWindow.classList.remove('hide');
        appWindow.style.display = 'none';
        appBody.innerHTML = '';
    }, 300);
}

function openApp(name) {
    try {
        cleanupCurrentApp();
        
        appTitle.textContent = name;
        appBody.innerHTML = '<div style="text-align: center; padding: 40px;"><div style="font-size: 24px;">üì±</div><p>ƒêang t·∫£i ·ª©ng d·ª•ng...</p></div>';
        appWindow.style.display = 'flex';
        appWindow.classList.add('show');

        logEvent(`M·ªü ·ª©ng d·ª•ng: ${name}`);

        setTimeout(() => {
            switch(name) {
                case 'Browser': loadBrowser(); break;
                case 'Music': loadMusic(); break;
                case 'ChatCBD': loadChatCBD(); break;
                case 'Call': loadCall(); break;
                case 'Notes': loadNotes(); break;
                case 'Speedtest': loadSpeedtest(); break;
                case 'Settings': loadSettings(); break;
                default: 
                    appBody.innerHTML = `<div class="empty-state"><div class="icon">‚ùì</div><p>·ª®ng d·ª•ng ch∆∞a ƒë∆∞·ª£c ph√°t tri·ªÉn</p></div>`;
            }
        }, 200);
        
    } catch (error) {
        console.error(`Error opening app ${name}:`, error);
        appBody.innerHTML = `<div class="empty-state"><div class="icon">‚ö†Ô∏è</div><h3>L·ªói ·ª©ng d·ª•ng</h3><p>·ª®ng d·ª•ng g·∫∑p s·ª± c·ªë khi kh·ªüi ƒë·ªông.</p><button onclick="openApp('${name}')">Th·ª≠ l·∫°i</button></div>`;
        logEvent(`L·ªói m·ªü ·ª©ng d·ª•ng: ${name}`);
    }
}

function loadBrowser() {
    appBody.innerHTML = `
        <div class="browser-nav">
            <input id="browserUrl" placeholder="T√¨m ki·∫øm ho·∫∑c nh·∫≠p URL" value="https://www.bing.com">
            <button onclick="navigateBrowser()">üîç</button>
        </div>
        <div class="browser-frame-container">
            <iframe id="browserFrame" src="https://www.bing.com" sandbox="allow-scripts allow-same-origin allow-forms allow-popups allow-popups-to-escape-sandbox"></iframe>
        </div>
    `;

    document.getElementById('browserUrl').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') navigateBrowser();
    });
}

function navigateBrowser() {
    try {
        let url = document.getElementById('browserUrl').value.trim();
        if (!url) return;

        if (!url.includes('.') || !url.startsWith('http')) {
            url = `https://www.bing.com/search?q=${encodeURIComponent(url)}`;
        } else if (!url.startsWith('http')) {
            url = 'https://' + url;
        }

        document.getElementById('browserFrame').src = url;
        logEvent(`Truy c·∫≠p: ${url.substring(0, 50)}...`);
    } catch (error) {
        console.error("Browser navigation error:", error);
        alert("Kh√¥ng th·ªÉ t·∫£i trang. Vui l√≤ng ki·ªÉm tra URL.");
    }
}

function loadMusic() {
    const playlist = data.playlist.length > 0 ? data.playlist.map((song, i) => `
        <div class="song-item ${i === data.currentTrackIndex ? 'playing' : ''}">
            <div class="song-info">
                <div class="song-title">${escapeHtml(song.name || 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')}</div>
                <div class="song-url">${escapeHtml(song.url.substring(0, 50))}...</div>
            </div>
            <div class="song-controls">
                <button onclick="playTrack(${i})" ${i === data.currentTrackIndex && data.isPlaying ? 'style="background: #ff4757;"' : ''}>
                    ${i === data.currentTrackIndex && data.isPlaying ? '‚è∏' : '‚ñ∂'}
                </button>
                <button onclick="removeTrack(${i})" style="background: #ff4757;">üóë</button>
            </div>
        </div>
    `).join('') : '<div class="empty-state"><div class="icon">üéµ</div><p>Playlist tr·ªëng</p><p>Th√™m nh·∫°c ƒë·ªÉ b·∫Øt ƒë·∫ßu</p></div>';

    const currentTrack = data.currentTrackIndex >= 0 ? data.playlist[data.currentTrackIndex] : null;

    appBody.innerHTML = `
        <div class="music-container">
            <div class="add-song-form">
                <input id="songUrl" placeholder="Nh·∫≠p link nh·∫°c (MP3, SoundCloud, etc.)" type="url">
                <input id="songName" placeholder="T√™n b√†i h√°t (t√πy ch·ªçn)">
                <button onclick="addTrack()">‚ûï Th√™m v√†o playlist</button>
            </div>

            <div class="music-player">
                <div class="player-header">
                    <div class="album-art">üéµ</div>
                    <div class="track-info">
                        <div class="track-title">${currentTrack ? escapeHtml(currentTrack.name) : 'Ch∆∞a ch·ªçn b√†i h√°t'}</div>
                        <div class="track-artist">PongbOS Music</div>
                    </div>
                </div>
                
                <div class="progress-container" onclick="seekTrack(event)">
                    <div class="progress-bar" id="progressBar"></div>
                </div>
                
                <div class="time-display">
                    <span id="currentTime">0:00</span>
                    <span id="totalTime">0:00</span>
                </div>
                
                <div class="player-controls">
                    <div class="control-btn" onclick="previousTrack()">‚Æú</div>
                    <div class="control-btn play-btn" onclick="togglePlayback()" id="playButton">
                        ${data.isPlaying ? '‚è∏' : '‚ñ∂'}
                    </div>
                    <div class="control-btn" onclick="nextTrack()">‚Æû</div>
                </div>
            </div>

            <div class="music-playlist">
                ${playlist}
            </div>
        </div>
        
        <audio id="audioPlayer" 
               ontimeupdate="updateProgress()" 
               onended="nextTrack()"
               onloadedmetadata="updateDuration()"
               onerror="handleAudioError()"></audio>
    `;

    if (data.currentAudio && data.isPlaying) {
        const newAudio = document.getElementById('audioPlayer');
        if (newAudio && currentTrack) {
            newAudio.src = currentTrack.url;
            newAudio.currentTime = data.currentAudio.currentTime || 0;
            newAudio.play().catch(() => {
                data.isPlaying = false;
                updatePlayerUI();
            });
            data.currentAudio = newAudio;
        }
    }
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function addTrack() {
    const urlInput = document.getElementById('songUrl');
    const nameInput = document.getElementById('songName');
    const url = urlInput.value.trim();
    const name = nameInput.value.trim();
    
    if (!url) {
        alert('Vui l√≤ng nh·∫≠p URL nh·∫°c');
        return;
    }

    try {
        new URL(url);
    } catch {
        alert('URL kh√¥ng h·ª£p l·ªá');
        return;
    }

    data.playlist.push({ url, name: name || `Track ${data.playlist.length + 1}` });
    urlInput.value = '';
    nameInput.value = '';
    loadMusic();
    logEvent(`Th√™m track: ${name || url.substring(0, 30)}`);
}

function removeTrack(index) {
    if (index === data.currentTrackIndex) {
        stopPlayback();
    }
    
    data.playlist.splice(index, 1);
    
    if (data.currentTrackIndex > index) {
        data.currentTrackIndex--;
    } else if (data.currentTrackIndex === index) {
        data.currentTrackIndex = -1;
    }
    
    loadMusic();
    logEvent('X√≥a track kh·ªèi playlist');
}

function playTrack(index) {
    const track = data.playlist[index];
    if (!track) return;

    data.currentTrackIndex = index;
    const audio = document.getElementById('audioPlayer');
    
    if (audio) {
        audio.src = track.url;
        audio.load();
        
        audio.play().then(() => {
            data.isPlaying = true;
            data.currentAudio = audio;
            updatePlayerUI();
            logEvent(`Ph√°t: ${track.name}`);
        }).catch(error => {
            console.error('Playback failed:', error);
            alert('Kh√¥ng th·ªÉ ph√°t nh·∫°c. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n.');
            data.isPlaying = false;
            updatePlayerUI();
        });
    }
}

function togglePlayback() {
    if (data.currentTrackIndex < 0 || data.currentTrackIndex >= data.playlist.length) {
        if (data.playlist.length > 0) {
            playTrack(0);
        }
        return;
    }

    const audio = document.getElementById('audioPlayer');
    if (!audio) return;

    if (data.isPlaying) {
        audio.pause();
        data.isPlaying = false;
    } else {
        audio.play().then(() => {
            data.isPlaying = true;
        }).catch(error => {
            console.error('Playback failed:', error);
            data.isPlaying = false;
        });
    }
    
    updatePlayerUI();
}

function stopPlayback() {
    const audio = document.getElementById('audioPlayer');
    if (audio) {
        audio.pause();
        audio.currentTime = 0;
    }
    data.isPlaying = false;
    data.currentAudio = null;
    updatePlayerUI();
}

function nextTrack() {
    if (data.playlist.length === 0) return;
    
    const nextIndex = (data.currentTrackIndex + 1) % data.playlist.length;
    playTrack(nextIndex);
}

function previousTrack() {
    if (data.playlist.length === 0) return;
    
    const prevIndex = data.currentTrackIndex > 0 ? data.currentTrackIndex - 1 : data.playlist.length - 1;
    playTrack(prevIndex);
}

function seekTrack(event) {
    const audio = document.getElementById('audioPlayer');
    if (!audio || !audio.duration) return;

    const container = event.currentTarget;
    const rect = container.getBoundingClientRect();
    const clickX = event.clientX - rect.left;
    const percentage = clickX / rect.width;
    
    audio.currentTime = percentage * audio.duration;
}

function updateProgress() {
    const audio = document.getElementById('audioPlayer');
    const progressBar = document.getElementById('progressBar');
    const currentTimeEl = document.getElementById('currentTime');
    
    if (audio && progressBar && audio.duration) {
        const progress = (audio.currentTime / audio.duration) * 100;
        progressBar.style.width = `${progress}%`;
        
        if (currentTimeEl) {
            currentTimeEl.textContent = formatTime(audio.currentTime);
        }
    }
}

function updateDuration() {
    const audio = document.getElementById('audioPlayer');
    const totalTimeEl = document.getElementById('totalTime');
    
    if (audio && totalTimeEl && audio.duration) {
        totalTimeEl.textContent = formatTime(audio.duration);
    }
}

function updatePlayerUI() {
    const playButton = document.getElementById('playButton');
    if (playButton) {
        playButton.textContent = data.isPlaying ? '‚è∏' : '‚ñ∂';
    }
    
    if (appTitle.textContent === 'Music') {
        loadMusic();
    }
}

function handleAudioError() {
    console.error('Audio loading error');
    alert('L·ªói khi t·∫£i file √¢m thanh. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n.');
    data.isPlaying = false;
    updatePlayerUI();
}

function formatTime(seconds) {
    if (isNaN(seconds)) return '0:00';
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs.toString().padStart(2, '0')}`;
}

function loadChatCBD() {
    const history = data.chatHistory.map(msg => `
        <div class="message ${msg.role}-message">
            ${escapeHtml(msg.content)}
        </div>
    `).join('');

    appBody.innerHTML = `
        <div class="chat-container">
            <div class="chat-messages" id="chatMessages">
                ${history || '<div class="message bot-message">Xin ch√†o! T√¥i l√† ChatCBD, tr·ª£ l√Ω AI c·ªßa PongbOS. T√¥i c√≥ th·ªÉ tr√≤ chuy·ªán v√† h·ªó tr·ª£ b·∫°n. H√£y g·ª≠i tin nh·∫Øn cho t√¥i!</div>'}
            </div>
            <div class="chat-input-area">
                <input type="text" class="chat-input" id="chatInput" placeholder="Nh·∫≠p tin nh·∫Øn...">
                <button onclick="sendMessage()" id="sendButton">G·ª≠i</button>
            </div>
        </div>
    `;

    document.getElementById('chatInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') sendMessage();
    });

    setTimeout(() => {
        const input = document.getElementById('chatInput');
        if (input) input.focus();
    }, 100);
}

function sendMessage() {
    const input = document.getElementById('chatInput');
    const message = input.value.trim();
    
    if (!message) return;

    addChatMessage('user', message);
    input.value = '';
    
    showTypingIndicator();
    
    setTimeout(() => {
        hideTypingIndicator();
        generateAIResponse(message);
    }, 1000 + Math.random() * 2000);
}

function addChatMessage(role, content) {
    const messagesContainer = document.getElementById('chatMessages');
    if (!messagesContainer) return;
    
    const messageEl = document.createElement('div');
    messageEl.className = `message ${role}-message`;
    messageEl.textContent = content;
    
    messagesContainer.appendChild(messageEl);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    
    data.chatHistory.push({ role, content });
    if (data.chatHistory.length > 50) {
        data.chatHistory = data.chatHistory.slice(-50);
    }
}

function showTypingIndicator() {
    const messagesContainer = document.getElementById('chatMessages');
    if (!messagesContainer) return;
    
    hideTypingIndicator();
    
    const typingEl = document.createElement('div');
    typingEl.id = 'typingIndicator';
    typingEl.className = 'typing-indicator';
    typingEl.innerHTML = `
        <div class="typing-dots">
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
        </div>
    `;
    
    messagesContainer.appendChild(typingEl);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

function hideTypingIndicator() {
    const indicator = document.getElementById('typingIndicator');
    if (indicator) indicator.remove();
}

function generateAIResponse(message) {
    const responses = [
        "ƒê√≥ l√† m·ªôt c√¢u h·ªèi th√∫ v·ªã! T√¥i nghƒ© r·∫±ng " + message.toLowerCase() + " l√† m·ªôt ch·ªß ƒë·ªÅ r·∫•t ƒë√°ng ƒë·ªÉ th·∫£o lu·∫≠n.",
        "C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª! V·ªÅ " + message.toLowerCase() + ", t√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu th√™m.",
        "Th·∫≠t tuy·ªát! T√¥i hi·ªÉu b·∫°n ƒëang quan t√¢m ƒë·∫øn " + message.toLowerCase() + ". B·∫°n mu·ªën bi·∫øt th√™m g√¨?",
        "Hmm, " + message.toLowerCase() + " l√† m·ªôt ƒëi·ªÅu th√∫ v·ªã. T√¥i s·∫Ω c·ªë g·∫Øng h·ªó tr·ª£ b·∫°n t·ªët nh·∫•t c√≥ th·ªÉ!",
        "T√¥i ƒë√£ ghi nh·∫≠n th√¥ng tin v·ªÅ " + message.toLowerCase() + ". C√≥ g√¨ kh√°c t√¥i c√≥ th·ªÉ gi√∫p b·∫°n kh√¥ng?"
    ];
    
    const lowerMessage = message.toLowerCase();
    let response;
    
    if (lowerMessage.includes('xin ch√†o') || lowerMessage.includes('hello')) {
        response = "Xin ch√†o! R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?";
    } else if (lowerMessage.includes('t√™n')) {
        response = "T√¥i l√† ChatCBD, tr·ª£ l√Ω AI ƒë∆∞·ª£c t√≠ch h·ª£p trong PongbOS. T√¥i ƒë∆∞·ª£c t·∫°o ra ƒë·ªÉ h·ªó tr·ª£ ng∆∞·ªùi d√πng!";
    } else if (lowerMessage.includes('th·ªùi ti·∫øt')) {
        response = "T√¥i kh√¥ng th·ªÉ truy c·∫≠p d·ªØ li·ªáu th·ªùi ti·∫øt th·ªùi gian th·ª±c, nh∆∞ng b·∫°n c√≥ th·ªÉ ki·ªÉm tra qua ·ª©ng d·ª•ng Browser!";
    } else if (lowerMessage.includes('pongbos')) {
        response = "PongbOS l√† m·ªôt h·ªá ƒëi·ªÅu h√†nh di ƒë·ªông ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi PongbCloud. N√≥ c√≥ nhi·ªÅu t√≠nh nƒÉng th√∫ v·ªã!";
    } else if (lowerMessage.includes('c·∫£m ∆°n')) {
        response = "Kh√¥ng c√≥ g√¨! T√¥i lu√¥n s·∫µn s√†ng gi√∫p ƒë·ª° b·∫°n. C√≤n g√¨ kh√°c t√¥i c√≥ th·ªÉ h·ªó tr·ª£ kh√¥ng?";
    } else {
        response = responses[Math.floor(Math.random() * responses.length)];
    }
    
    addChatMessage('bot', response);
    logEvent(`ChatCBD: ${message.substring(0, 30)}...`);
}

function loadCall() {
    const friendsList = data.friends.length > 0 ? data.friends.map((friend, i) => `
        <div class="friend-item">
            <div class="friend-info">
                <div class="friend-name">${escapeHtml(friend.name)}</div>
                <div class="friend-port">Port: ${friend.port}</div>
                <div style="font-size: 12px; color: var(--muted);">
                    ${friend.online ? 'üü¢ Online' : 'üî¥ Offline'}
                </div>
            </div>
            <div class="friend-actions">
                <button onclick="initiateCall(${i})" ${!friend.online ? 'disabled' : ''}>üìû</button>
                <button onclick="removeFriend(${i})" style="background: #ff4757;">üóë</button>
            </div>
        </div>
    `).join('') : '<div class="empty-state"><div class="icon">üë•</div><p>Ch∆∞a c√≥ b·∫°n b√®</p></div>';

    appBody.innerHTML = `
        <div class="call-container">
            <div class="call-section">
                <h3>üÜî Th√¥ng tin c·ªßa b·∫°n</h3>
                <div class="call-id-display">
                    <div>Call ID</div>
                    <div class="call-id">${data.callPort}</div>
                    <button onclick="generateNewCallId()">üîÑ T·∫°o ID m·ªõi</button>
                </div>
            </div>

            <div class="call-section">
                <h3>‚ûï Th√™m b·∫°n b√®</h3>
                <input type="number" id="friendPort" placeholder="Nh·∫≠p Call ID c·ªßa b·∫°n">
                <input type="text" id="friendName" placeholder="T√™n hi·ªÉn th·ªã">
                <button onclick="addFriend()">Th√™m b·∫°n</button>
            </div>

            <div class="call-section">
                <h3>üë• Danh s√°ch b·∫°n b√®</h3>
                <div class="friends-list">
                    ${friendsList}
                </div>
            </div>

            ${data.callStatus !== 'idle' ? `
                <div class="call-section">
                    <h3>üìû Cu·ªôc g·ªçi</h3>
                    <div class="video-container">
                        <div>Ch·∫ø ƒë·ªô m√¥ ph·ªèng cu·ªôc g·ªçi</div>
                        <div style="margin-top: 10px;">${getCallStatusText()}</div>
                    </div>
                    <div style="display: flex; gap: 10px; margin-top: 15px;">
                        <button onclick="endCall()" style="background: #ff4757;">üìµ K·∫øt th√∫c</button>
                        ${data.callStatus === 'incoming' ? '<button onclick="acceptCall()" style="background: #2ed573;">‚úÖ Ch·∫•p nh·∫≠n</button>' : ''}
                    </div>
                </div>
            ` : ''}
        </div>
    `;
}

function generateNewCallId() {
    data.callPort = Math.floor(1000 + Math.random() * 9000);
    loadCall();
    logEvent(`T·∫°o Call ID m·ªõi: ${data.callPort}`);
}

function addFriend() {
    const portInput = document.getElementById('friendPort');
    const nameInput = document.getElementById('friendName');
    const port = portInput.value.trim();
    const name = nameInput.value.trim();
    
    if (!port || !name) {
        alert('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin');
        return;
    }
    
    if (port == data.callPort) {
        alert('Kh√¥ng th·ªÉ th√™m ch√≠nh m√¨nh');
        return;
    }
    
    if (data.friends.some(f => f.port == port)) {
        alert('B·∫°n b√® ƒë√£ t·ªìn t·∫°i');
        return;
    }
    
    data.friends.push({ 
        port: parseInt(port), 
        name, 
        online: Math.random() > 0.3
    });
    
    portInput.value = '';
    nameInput.value = '';
    loadCall();
    logEvent(`Th√™m b·∫°n b√®: ${name} (${port})`);
}

function removeFriend(index) {
    const friend = data.friends[index];
    data.friends.splice(index, 1);
    loadCall();
    logEvent(`X√≥a b·∫°n b√®: ${friend.name}`);
}

function initiateCall(index) {
    const friend = data.friends[index];
    data.callStatus = 'calling';
    data.currentCall = friend;
    loadCall();
    logEvent(`G·ªçi cho ${friend.name}`);
    
    setTimeout(() => {
        if (data.callStatus === 'calling') {
            const responses = ['accepted', 'declined', 'no_answer'];
            const response = responses[Math.floor(Math.random() * responses.length)];
            
            switch (response) {
                case 'accepted':
                    data.callStatus = 'connected';
                    break;
                case 'declined':
                    data.callStatus = 'idle';
                    alert('Cu·ªôc g·ªçi b·ªã t·ª´ ch·ªëi');
                    break;
                case 'no_answer':
                    data.callStatus = 'idle';
                    alert('Kh√¥ng c√≥ ph·∫£n h·ªìi');
                    break;
            }
            
            if (appTitle.textContent === 'Call') {
                loadCall();
            }
        }
    }, 3000 + Math.random() * 5000);
}

function acceptCall() {
    data.callStatus = 'connected';
    loadCall();
    logEvent('Ch·∫•p nh·∫≠n cu·ªôc g·ªçi');
}

function endCall() {
    data.callStatus = 'idle';
    data.currentCall = null;
    loadCall();
    logEvent('K·∫øt th√∫c cu·ªôc g·ªçi');
}

function getCallStatusText() {
    switch (data.callStatus) {
        case 'calling': return 'üì± ƒêang g·ªçi...';
        case 'incoming': return 'üìû Cu·ªôc g·ªçi ƒë·∫øn';
        case 'connected': return 'üîó ƒê√£ k·∫øt n·ªëi';
        default: return 'üì± S·∫µn s√†ng';
    }
}

function loadNotes() {
    const notesList = data.notes.length > 0 ? data.notes.map((note, i) => `
        <div class="note-item">
            <div class="note-content">${escapeHtml(note.content)}</div>
            <div class="note-date">${new Date(note.timestamp).toLocaleString('vi-VN')}</div>
            <div class="note-actions">
                <button onclick="editNote(${i})">‚úèÔ∏è S·ª≠a</button>
                <button onclick="deleteNote(${i})" style="background: #ff4757;">üóë X√≥a</button>
            </div>
        </div>
    `).join('') : '<div class="empty-state"><div class="icon">üìù</div><p>Ch∆∞a c√≥ ghi ch√∫</p></div>';

    appBody.innerHTML = `
        <div class="notes-container">
            <div class="note-editor">
                <textarea id="noteContent" placeholder="Nh·∫≠p ghi ch√∫ m·ªõi..."></textarea>
                <button onclick="addNote()">üíæ L∆∞u ghi ch√∫</button>
            </div>
            <div class="notes-list">
                ${notesList}
            </div>
        </div>
    `;
}

function addNote() {
    const content = document.getElementById('noteContent').value.trim();
    if (!content) {
        alert('Vui l√≤ng nh·∫≠p n·ªôi dung ghi ch√∫');
        return;
    }

    data.notes.unshift({
        content,
        timestamp: Date.now(),
        id: Date.now()
    });

    document.getElementById('noteContent').value = '';
    loadNotes();
    logEvent('Th√™m ghi ch√∫ m·ªõi');
}

function editNote(index) {
    const note = data.notes[index];
    const newContent = prompt('Ch·ªânh s·ª≠a ghi ch√∫:', note.content);
    
    if (newContent !== null && newContent.trim()) {
        data.notes[index].content = newContent.trim();
        data.notes[index].timestamp = Date.now();
        loadNotes();
        logEvent('Ch·ªânh s·ª≠a ghi ch√∫');
    }
}

function deleteNote(index) {
    if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ghi ch√∫ n√†y?')) {
        data.notes.splice(index, 1);
        loadNotes();
        logEvent('X√≥a ghi ch√∫');
    }
}

function loadSpeedtest() {
    appBody.innerHTML = `
        <div class="speedtest-container">
            <h2>üöÄ PongbOS Speedtest</h2>
            <p>Ki·ªÉm tra t·ªëc ƒë·ªô m·∫°ng th·ª±c t·∫ø c·ªßa b·∫°n</p>
            
            <button onclick="runSpeedTest()" id="startTest" style="font-size: 16px; padding: 15px 30px; margin: 20px 0;">
                üéØ B·∫Øt ƒë·∫ßu ki·ªÉm tra
            </button>

            <div id="testResults" style="display: none;">
                <div class="speed-gauge">
                    <div class="gauge-bg">
                        <div class="gauge-inner">
                            <div class="speed-value" id="speedValue">--</div>
                            <div class="speed-unit">Mbps</div>
                        </div>
                    </div>
                </div>

                <div class="speedtest-metrics">
                    <div class="metric-card">
                        <div class="metric-label">Ping</div>
                        <div class="metric-value" id="pingValue">--</div>
                        <div style="font-size: 12px; color: var(--muted);">ms</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-label">Download</div>
                        <div class="metric-value" id="downloadValue">--</div>
                        <div style="font-size: 12px; color: var(--muted);">Mbps</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-label">Upload</div>
                        <div class="metric-value" id="uploadValue">--</div>
                        <div style="font-size: 12px; color: var(--muted);">Mbps</div>
                    </div>
                </div>

                <div id="performanceAnalysis"></div>
            </div>

            <div id="testLog" style="margin-top: 20px; padding: 15px; background: var(--card); border-radius: 12px; font-family: monospace; font-size: 12px; max-height: 200px; overflow-y: auto;"></div>
        </div>
    `;
}

async function runSpeedTest() {
    const startBtn = document.getElementById('startTest');
    const results = document.getElementById('testResults');
    
    startBtn.disabled = true;
    startBtn.textContent = 'üîÑ ƒêang ki·ªÉm tra...';
    results.style.display = 'block';
    
    try {
        await testLatency();
        await testDownloadSpeed();
        await testUploadSpeed();
        analyzePerformance();
        
        startBtn.textContent = '‚úÖ Ho√†n th√†nh - Ch·∫°y l·∫°i';
        logEvent('Ho√†n th√†nh SpeedTest');
        
    } catch (error) {
        console.error('Speed test error:', error);
        logToSpeedTest('‚ùå L·ªói khi ch·∫°y speed test: ' + error.message);
    }
    
    startBtn.disabled = false;
}

async function testLatency() {
    logToSpeedTest('üîç ƒêang ki·ªÉm tra ƒë·ªô tr·ªÖ...');
    
    const testUrls = [
        'https://www.google.com/favicon.ico',
        'https://www.cloudflare.com/favicon.ico',
        'https://www.github.com/favicon.ico'
    ];
    
    let totalLatency = 0;
    let successfulTests = 0;
    
    for (const url of testUrls) {
        try {
            const start = performance.now();
            await fetch(url + '?t=' + Date.now(), { 
                method: 'HEAD', 
                mode: 'no-cors',
                cache: 'no-cache'
            });
            const latency = performance.now() - start;
            totalLatency += latency;
            successfulTests++;
            
            logToSpeedTest(`‚úÖ ${url}: ${Math.round(latency)}ms`);
            
        } catch (error) {
            logToSpeedTest(`‚ùå ${url}: Th·∫•t b·∫°i`);
        }
    }
    
    const avgLatency = successfulTests > 0 ? Math.round(totalLatency / successfulTests) : 999;
    document.getElementById('pingValue').textContent = avgLatency;
    
    logToSpeedTest(`üìä Ping trung b√¨nh: ${avgLatency}ms`);
}

async function testDownloadSpeed() {
    logToSpeedTest('‚¨áÔ∏è ƒêang ki·ªÉm tra t·ªëc ƒë·ªô t·∫£i xu·ªëng...');
    
    const testSizes = [100, 500, 1000];
    let totalSpeed = 0;
    let tests = 0;
    
    for (const size of testSizes) {
        try {
            const testUrl = `https://picsum.photos/${Math.sqrt(size * 1000)}/${Math.sqrt(size * 1000)}?random=${Date.now()}`;
            
            const start = performance.now();
            const response = await fetch(testUrl);
            const data = await response.blob();
            const duration = (performance.now() - start) / 1000;
            
            const speedMbps = (data.size * 8) / (duration * 1000000);
            totalSpeed += speedMbps;
            tests++;
            
            logToSpeedTest(`üì• ${size}KB: ${speedMbps.toFixed(2)} Mbps`);
            
        } catch (error) {
            logToSpeedTest(`‚ùå Test ${size}KB th·∫•t b·∫°i`);
        }
    }
    
    const avgDownload = tests > 0 ? (totalSpeed / tests).toFixed(2) : 0;
    document.getElementById('downloadValue').textContent = avgDownload;
    document.getElementById('speedValue').textContent = avgDownload;
    
    logToSpeedTest(`üìä T·ªëc ƒë·ªô download: ${avgDownload} Mbps`);
}

async function testUploadSpeed() {
    logToSpeedTest('‚¨ÜÔ∏è M√¥ ph·ªèng ki·ªÉm tra t·ªëc ƒë·ªô t·∫£i l√™n...');
    
    const downloadSpeed = parseFloat(document.getElementById('downloadValue').textContent);
    const uploadSpeed = (downloadSpeed * (0.1 + Math.random() * 0.3)).toFixed(2);
    
    document.getElementById('uploadValue').textContent = uploadSpeed;
    logToSpeedTest(`üìä T·ªëc ƒë·ªô upload (∆∞·ªõc t√≠nh): ${uploadSpeed} Mbps`);
}

function analyzePerformance() {
    const ping = parseInt(document.getElementById('pingValue').textContent);
    const download = parseFloat(document.getElementById('downloadValue').textContent);
    const upload = parseFloat(document.getElementById('uploadValue').textContent);
    
    const analysis = document.getElementById('performanceAnalysis');
    
    let quality = 'T·ªët';
    let recommendations = [];
    
    if (ping > 100) {
        quality = 'K√©m';
        recommendations.push('üî¥ ƒê·ªô tr·ªÖ cao - Kh√¥ng ph√π h·ª£p cho gaming/video call');
    } else if (ping > 50) {
        quality = 'Trung b√¨nh';
        recommendations.push('üü° ƒê·ªô tr·ªÖ h∆°i cao - Gaming c√≥ th·ªÉ b·ªã ·∫£nh h∆∞·ªüng');
    } else {
        recommendations.push('üü¢ ƒê·ªô tr·ªÖ th·∫•p - Ph√π h·ª£p m·ªçi ho·∫°t ƒë·ªông');
    }
    
    if (download < 5) {
        quality = 'K√©m';
        recommendations.push('üî¥ T·ªëc ƒë·ªô t·∫£i ch·∫≠m - Kh√≥ xem video HD');
    } else if (download < 25) {
        recommendations.push('üü° ƒê·ªß cho streaming HD, c√≥ th·ªÉ ch·∫≠m v·ªõi 4K');
    } else {
        recommendations.push('üü¢ T·ªëc ƒë·ªô t·∫£i xu·∫•t s·∫Øc - H·ªó tr·ª£ 4K v√† ƒëa t√°c v·ª•');
    }
    
    analysis.innerHTML = `
        <div style="margin-top: 20px; padding: 15px; background: var(--card); border-radius: 12px;">
            <h3>üìã Ph√¢n t√≠ch k·∫øt qu·∫£</h3>
            <p><strong>Ch·∫•t l∆∞·ª£ng k·∫øt n·ªëi:</strong> ${quality}</p>
            <div style="margin-top: 10px;">
                ${recommendations.map(rec => `<div style="margin: 5px 0;">${rec}</div>`).join('')}
            </div>
        </div>
    `;
    
    logToSpeedTest(`üéØ ƒê√°nh gi√°: ${quality}`);
}

function logToSpeedTest(message) {
    const log = document.getElementById('testLog');
    if (!log) return;
    const timestamp = new Date().toLocaleTimeString();
    log.innerHTML += `[${timestamp}] ${message}<br>`;
    log.scrollTop = log.scrollHeight;
}

function loadSettings() {
    appBody.innerHTML = `
        <div class="settings-section">
            <h3>üé® Giao di·ªán</h3>
            <div class="color-picker">
                <label>M√†u ch·ªß ƒë·∫°o:</label>
                <input type="color" id="accentColor" value="${data.accentColor}">
                <button onclick="updateAccentColor()">√Åp d·ª•ng</button>
            </div>
        </div>

        <div class="settings-section">
            <h3>üíæ D·ªØ li·ªáu</h3>
            <button onclick="exportData()">üì§ Xu·∫•t d·ªØ li·ªáu</button>
            <input type="file" id="importFile" accept=".json" style="display:none" onchange="importData(event)">
            <button onclick="document.getElementById('importFile').click()">üì• Nh·∫≠p d·ªØ li·ªáu</button>
            <button onclick="clearAllData()" style="background: #ff4757;">üóëÔ∏è X√≥a t·∫•t c·∫£ d·ªØ li·ªáu</button>
        </div>

        <div class="settings-section">
            <h3>üìä Th·ªëng k√™</h3>
            <div style="padding: 15px; background: rgba(0,0,0,0.1); border-radius: 8px; margin: 10px 0;">
                <div>üìù Ghi ch√∫: ${data.notes.length}</div>
                <div>üéµ Playlist: ${data.playlist.length} b√†i</div>
                <div>üë• B·∫°n b√®: ${data.friends.length}</div>
                <div>üí¨ Tin nh·∫Øn chat: ${data.chatHistory.length}</div>
                <div>üìã System logs: ${data.logs.length}</div>
            </div>
        </div>

        <div class="settings-section">
            <h3>üîß H·ªá th·ªëng</h3>
            <div style="padding: 15px; background: rgba(0,0,0,0.1); border-radius: 8px; margin: 10px 0;">
                <div><strong>PongbOS</strong> v2.1</div>
                <div>Ph√°t tri·ªÉn b·ªüi <strong>PongbCloud</strong></div>
                <div>Build: ${Date.now().toString().slice(-6)}</div>
            </div>
            
            <button onclick="viewSystemLogs()">üìã Xem system logs</button>
        </div>
    `;
}

function updateAccentColor() {
    const color = document.getElementById('accentColor').value;
    data.accentColor = color;
    document.documentElement.style.setProperty('--accent', color);
    logEvent(`ƒê·ªïi m√†u ch·ªß ƒë·∫°o: ${color}`);
    alert('ƒê√£ c·∫≠p nh·∫≠t m√†u ch·ªß ƒë·∫°o!');
}

function exportData() {
    const dataStr = JSON.stringify(data, null, 2);
    const dataBlob = new Blob([dataStr], {type: 'application/json'});
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(dataBlob);
    link.download = `pongbos-backup-${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    
    logEvent('Xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng');
}

function importData(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const importedData = JSON.parse(e.target.result);
            
            if (confirm('‚ö†Ô∏è Nh·∫≠p d·ªØ li·ªáu s·∫Ω ghi ƒë√® l√™n d·ªØ li·ªáu hi·ªán t·∫°i. Ti·∫øp t·ª•c?')) {
                data.notes = importedData.notes || [];
                data.playlist = importedData.playlist || [];
                data.chatHistory = importedData.chatHistory || [];
                data.friends = importedData.friends || [];
                data.accentColor = importedData.accentColor || '#4ba3ff';
                
                document.documentElement.style.setProperty('--accent', data.accentColor);
                
                alert('‚úÖ Nh·∫≠p d·ªØ li·ªáu th√†nh c√¥ng!');
                logEvent('Nh·∫≠p d·ªØ li·ªáu t·ª´ file backup');
                loadSettings();
            }
        } catch (error) {
            alert('‚ùå L·ªói: File kh√¥ng h·ª£p l·ªá');
            console.error('Import error:', error);
        }
    };
    reader.readAsText(file);
}

function clearAllData() {
    if (confirm('‚ö†Ô∏è C·∫¢NH B√ÅO: B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a T·∫§T C·∫¢ d·ªØ li·ªáu? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!')) {
        const confirmText = prompt('G√µ "X√ìA H·∫æT" ƒë·ªÉ x√°c nh·∫≠n:');
        if (confirmText === 'X√ìA H·∫æT') {
            data = {
                notes: [],
                playlist: [],
                wallpapers: data.wallpapers,
                homeWallpapers: data.homeWallpapers,
                currentWallpaperIndex: 0,
                currentHomeWallpaperIndex: 0,
                accentColor: '#4ba3ff',
                logs: ['System reset by user'],
                currentTrackIndex: -1,
                isPlaying: false,
                chatHistory: [],
                callPort: Math.floor(1000 + Math.random() * 9000),
                friends: [],
                callStatus: 'idle',
                currentAudio: null,
                currentCall: null
            };
            
            document.documentElement.style.setProperty('--accent', data.accentColor);
            alert('‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ d·ªØ li·ªáu!');
            closeApp();
        }
    }
}

function viewSystemLogs() {
    const logsHtml = data.logs.map(log => `<div>${escapeHtml(log)}</div>`).join('');
    
    appBody.innerHTML = `
        <div>
            <button onclick="loadSettings()" style="margin-bottom: 15px;">‚Üê Quay l·∫°i Settings</button>
            <h3>üìã System Logs</h3>
            <div style="background: var(--card); padding: 15px; border-radius: 12px; max-height: 400px; overflow-y: auto; font-family: monospace; font-size: 12px;">
                ${logsHtml || '<div>Kh√¥ng c√≥ logs</div>'}
            </div>
            <button onclick="clearLogs()" style="background: #ff4757; margin-top: 10px;">X√≥a logs</button>
        </div>
    `;
}

function clearLogs() {
    if (confirm('X√≥a t·∫•t c·∫£ system logs?')) {
        data.logs = [];
        viewSystemLogs();
        logEvent('ƒê√£ x√≥a system logs');
    }
}

function updateTime() {
    const now = new Date();
    const time = now.toLocaleTimeString('vi-VN', { 
        hour: '2-digit', 
        minute: '2-digit',
        hour12: false
    });
    const date = now.toLocaleDateString('vi-VN', { 
        weekday: 'long', 
        day: 'numeric', 
        month: 'long' 
    });

    const lockTime = document.getElementById('lock-time');
    const lockDate = document.getElementById('lock-date');
    const statusTime = document.getElementById('status-time');

    if (lockTime) lockTime.textContent = time;
    if (lockDate) lockDate.textContent = date;
    if (statusTime) statusTime.textContent = time;
}

function updateWallpapers() {
    const lockScreen = document.getElementById('lockscreen');
    const homeScreen = document.querySelector('.home');
    
    if (lockScreen && data.wallpapers[data.currentWallpaperIndex]) {
        lockScreen.style.backgroundImage = `linear-gradient(135deg, rgba(0,0,0,0.3), rgba(75,163,255,0.1)), url('${data.wallpapers[data.currentWallpaperIndex]}')`;
    }
    
    if (homeScreen && data.homeWallpapers[data.currentHomeWallpaperIndex]) {
        homeScreen.style.backgroundImage = `linear-gradient(135deg, rgba(0,0,0,0.1), rgba(75,163,255,0.05)), url('${data.homeWallpapers[data.currentHomeWallpaperIndex]}')`;
    }
}

let startY = 0;
let isMouseDown = false;
const lockScreen = document.getElementById('lockscreen');

lockScreen.addEventListener('touchstart', e => {
    startY = e.touches[0].clientY;
    lockScreen.style.transition = 'none';
});

lockScreen.addEventListener('touchmove', e => {
    const currentY = e.touches[0].clientY;
    const diff = startY - currentY;
    
    if (diff > 0) {
        lockScreen.style.transform = `translateY(-${Math.min(diff, window.innerHeight)}px)`;
    }
});

lockScreen.addEventListener('touchend', e => {
    const currentY = e.changedTouches[0].clientY;
    const diff = startY - currentY;
    
    lockScreen.style.transition = 'transform 0.6s cubic-bezier(0.23, 1, 0.32, 1)';
    
    if (diff > 150) {
        lockScreen.classList.add('hidden');
        logEvent('M·ªü kh√≥a m√†n h√¨nh');
    } else {
        lockScreen.style.transform = 'translateY(0)';
    }
});

lockScreen.addEventListener('mousedown', e => {
    startY = e.clientY;
    isMouseDown = true;
    lockScreen.style.transition = 'none';
    e.preventDefault();
});

document.addEventListener('mousemove', e => {
    if (!isMouseDown || startY === 0 || !lockScreen.classList.contains('hidden') === false) return;
    
    const currentY = e.clientY;
    const diff = startY - currentY;
    
    if (diff > 0 && lockScreen.style.display !== 'none') {
        lockScreen.style.transform = `translateY(-${Math.min(diff, window.innerHeight)}px)`;
    }
});

document.addEventListener('mouseup', e => {
    if (!isMouseDown) return;
    
    const currentY = e.clientY;
    const diff = startY - currentY;
    
    lockScreen.style.transition = 'transform 0.6s cubic-bezier(0.23, 1, 0.32, 1)';
    
    if (diff > 150) {
        lockScreen.classList.add('hidden');
        logEvent('M·ªü kh√≥a m√†n h√¨nh (chu·ªôt)');
    } else {
        lockScreen.style.transform = 'translateY(0)';
    }
    
    isMouseDown = false;
    startY = 0;
});

updateTime();
updateWallpapers();
setInterval(updateTime, 1000);

setInterval(() => {
    data.friends.forEach(friend => {
        if (Math.random() < 0.1) {
            friend.online = !friend.online;
        }
    });
}, 10000);

logEvent('PongbOS v2.1 kh·ªüi ƒë·ªông ho√†n t·∫•t');